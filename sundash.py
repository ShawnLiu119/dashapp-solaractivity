# -*- coding: utf-8 -*-
"""SunDash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/130-Z_utN04bN0PZOczUn2y6bLszgtMO7

##Sun Dash: Monitoring and Analyzing Solar Activity
####DS 3500: Advanced Programming with Data
"""

##Set up logistic with library and data

!pip install jupyter-dash

!pip install dash==2.0.0

!pip install dash-html-components

!pip install dash-core-components

!pip install plotly

import dash
import dash_html_components as html
import dash_core_components as dcc
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime as dt

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/MyDrive/Dashboard_SunDash/SN_d_tot_V2.0.csv'

#"Source: WDC-SILSO, Royal Observatory of Belgium, Brussels".
#year, month, day, decimal year, SNvalue , SNerror, Nb observations

"""####EDA"""

df_his = pd.read_csv(path)
df_his.head()

df_his = pd.read_csv(path, sep=';', names = ['year', 'month','day', 'decimal_year', 'SNvalue' ,'SNError', 'Nb_observations','obs' ])
df_his.head()

df_dai = df_his[df_his['year']>1980]

#it seems that the time series data - observation starting from 1981,so truncated the data from 1981

fig1 = go.Figure(data=[go.Scatter(x=df_dai['decimal_year'], y=df_dai['SNvalue'])])
fig1.show()

dcc.Graph(figure=fig1)

from dash import Dash, html, dcc, Input, Output
from jupyter_dash import JupyterDash

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = JupyterDash(__name__, external_stylesheets=external_stylesheets)
#https://medium.com/@divyakarthik28/moving-average-crossover-for-stocks-using-dash-d6fc91702999

df_dai['year'].unique()

app.layout = html.Div([
    html.Div([html.H1("Sunspot Observation - 1981-2022")], style={'textAlign': "center"}),
    html.Div([
        html.Div([
            html.Div([dcc.Graph(id="my-graph")], className="row", style={"margin": "auto"}),
            html.Div([html.Div(dcc.RangeSlider(id="year selection", updatemode='drag',
                                               marks={i: '{}'.format(i) for i in df_dai['year'].unique().tolist()},
                                               min=df_dai['year'].min(), max=df_dai['year'].max(), value=[1990, 2020]),
                               className="row", style={"padding-bottom": 30,"width":"100%","margin":"auto"}),
                      html.Span("Moving Average : Select Window Interval", className="row",
                                style={"padding-top": 30,"padding-left": 40,"display":"block",
                                       "align-self":"center","width":"80%","margin":"auto"}),
                      html.Div(dcc.Slider(id="select-range1", updatemode='drag',
                                          marks={i * 10: str(i * 1) for i in range(0, 31)},
                                          min=0, max=30, value=15), className="row", style={"padding": 10}),
                      # html.Div(dcc.Slider(id="select-range2", updatemode='drag',
                      #                     marks={i * 10: str(i * 10) for i in range(0, 21)},
                      #                     min=0, max=200, value=170), className="row", style={"padding": 10})
                      ], className="row")
        ], className="six columns",style={"margin-right":0,"padding":0}),
        # html.Div([
        #     dcc.Graph(id="plot-graph")
        # ], className="six columns",style={"margin-left":0,"padding":0}),
    ], className="row")
   ], className="container")


@app.callback(
    Output("my-graph", 'figure'),
    [Input("year selection", 'value'),
     Input("select-range1", 'value')])
    #  Input("select-range2", 'value')])

def update_ma(year, range1, range2):
    df_apl = df_dai[(df_dai["year"] >= year[0]) & (df_dai["year"] <= year[1])]

    rolling_mean1 = df_apl['SNvalue'].rolling(window=range1).mean()
    # rolling_mean2 =  df_ap1['SNvalue'].rolling(window=range2).mean()

    trace1 = go.Scatter(x=df_apl['day'], y=df_apl['SNvalue'],
                        mode='lines', name='SunSpot daily')
    trace_a = go.Scatter(x=df_apl['day'], y=rolling_mean1, mode='lines', yaxis='y', name=f'SMA {range1}')
    # trace_b = go.Scatter(x=df_apl['Date'], y=rolling_mean2, mode='lines', yaxis='y', name=f'SMA {range2}')

    layout1 = go.Layout({'title': 'Solar Activity Observation With Moving Average',
                         "legend": {"orientation": "h","xanchor":"left"}
                        #  "xaxis": {
                        #      "rangeselector": {
                        #          "buttons": [
                        #              {"count": 6, "label": "6M", "step": "month",
                        #               "stepmode": "backward"},
                        #              {"count": 1, "label": "1Y", "step": "year",
                        #               "stepmode": "backward"},
                        #              {"count": 1, "label": "YTD", "step": "year",
                        #               "stepmode": "todate"},
                        #              {"label": "5Y", "step": "all",
                        #               "stepmode": "backward"}
                        #          ]
                        #      }}
                         })

    figure = {'data': [trace1],
              'layout': layout1
              }
    figure['data'].append(trace_a)
    # figure['data'].append(trace_b)
    return figure

if __name__ == "__main__":
    app.run_server(mode='inline')

